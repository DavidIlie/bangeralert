generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CommentOptions {
  UPVOTE
  DOWNVOTE
}

model CommentOpinion {
  id        String         @id @default(uuid())
  type      CommentOptions
  commentId String
  Comment   Comment        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  User      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id             String           @id @default(uuid())
  comment        String
  opinions       CommentOptions[]
  userId         String
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  underReview    Boolean          @default(false)
  date           DateTime         @default(now())
  CommentOpinion CommentOpinion[]

  songId String?
  Song   Song?   @relation("commentSong", fields: [songId], references: [spotify_id], onDelete: Cascade)

  albumId String?
  Album   Album?  @relation("commentAlbum", fields: [albumId], references: [spotify_id], onDelete: Cascade)

  artistId String?
  Artist   Artist? @relation("commentArtist", fields: [artistId], references: [spotify_id], onDelete: Cascade)
}

model Star {
  id     String  @id @default(uuid())
  userId String
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating Int     @default(5)
  hidden Boolean @default(false)

  songId String?
  Song   Song?   @relation("starSong", fields: [songId], references: [spotify_id], onDelete: Cascade)

  albumId String?
  Album   Album?  @relation("starAlbum", fields: [albumId], references: [spotify_id], onDelete: Cascade)

  artistId String?
  Artist   Artist? @relation("starArtist", fields: [artistId], references: [spotify_id], onDelete: Cascade)
}

model Interaction {
  id            String  @id @default(uuid())
  hasBookmarked Boolean
  hasOnSpotify  Boolean
  userId        String
  User          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  songId String?
  Song   Song?   @relation("interactionSong", fields: [songId], references: [spotify_id], onDelete: Cascade)

  albumId String?
  Album   Album?  @relation("interactionAlbum", fields: [albumId], references: [spotify_id], onDelete: Cascade)

  artistId String?
  Artist   Artist? @relation("interactionArtist", fields: [artistId], references: [spotify_id], onDelete: Cascade)
}

model Artist {
  id         String @default(uuid())
  spotify_id String @id

  external_url String
  name         String

  genres     String[]
  followers  Int?
  popularity Int?
  cover_url  String?

  albums Album[]

  Stars        Star[]        @relation("starArtist")
  Comments     Comment[]     @relation("commentArtist")
  Interactions Interaction[] @relation("interactionArtist")
}

model Album {
  id         String @default(uuid())
  spotify_id String @id

  name         String
  external_url String
  cover_url    String
  release_date DateTime
  total_tracks Int

  artist Artist[]
  songs  Song[]

  Stars        Star[]        @relation("starAlbum")
  Comments     Comment[]     @relation("commentAlbum")
  Interactions Interaction[] @relation("interactionAlbum")
}

model Song {
  id         String @default(uuid())
  spotify_id String @id

  explicit     Boolean
  name         String
  popularity   Int
  preview_url  String
  track_number Int
  external_url String

  album Album[]

  Stars        Star[]        @relation("starSong")
  Comments     Comment[]     @relation("commentSong")
  Interactions Interaction[] @relation("interactionSong")
}

enum FollowType {
  FOLLOW
  FOLLOWER
}

model Follow {
  id                 String     @id @default(uuid())
  ogUser             String
  ogUserRelation     User       @relation("ogUserFollow", fields: [ogUser], references: [id], onDelete: Cascade)
  targetUser         String
  targetUserRelation User       @relation("targetUserFollow", fields: [targetUser], references: [id], onDelete: Cascade)
  type               FollowType
  date               DateTime   @default(now())
  shadowBanned       Boolean    @default(false)
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  accessToken       String?
  accessTokenObtain DateTime?

  username    String?
  description String?
  website     String?

  FollowSent     Follow[] @relation("ogUserFollow")
  FollowRecieved Follow[] @relation("targetUserFollow")

  Interaction    Interaction[]
  CommentOpinion CommentOpinion[]
  Comment        Comment[]
  Star           Star[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
